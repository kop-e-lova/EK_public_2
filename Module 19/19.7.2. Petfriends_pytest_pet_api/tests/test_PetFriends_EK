from api import PetFriends
from settings import valid_email, valid_password, invalid_email, invalid_password, invalid_auth_key, other_email
import os
pf = PetFriends()

#1)тест на запрос ключа по валидному электронному адресу, невалидному паролю (passed)
def test_get_api_key_for_invalid_user(email=invalid_email, password=valid_password):
    status, result = pf.get_api_key(email, password)
    assert status == 403
    """ Проверяем что запрос api ключа возвращает статус 403 

    # Отправляем запрос и сохраняем полученный ответ с кодом статуса в status, а текст ответа в result
    status, result = pf.get_api_key(email, password)

    # Сверяем полученные данные с нашими ожиданиями
    assert status == 403"""

#2)тест на запрос ключа по невалидному паролю (passed)
def test_get_api_key_by_invalid_password(email=valid_email, password=invalid_password):
    status, result = pf.get_api_key(email, password)
    assert status == 403
    """ Проверяем что запрос api ключа возвращает статус 403 

    # Отправляем запрос и сохраняем полученный ответ с кодом статуса в status, а текст ответа в result
    status, result = pf.get_api_key(email, password)

    # Сверяем полученные данные с нашими ожиданиями
    assert status == 403"""

#3)позитивный тест на запрос my_pets по валидному ключу(passed)
def test_get_my_pets_with_valid_key(filter='my_pets'):
    """ Проверяем что запрос my_pets питомцев возвращает не пустой список.
    Для этого сначала получаем api ключ и сохраняем в переменную auth_key. Далее используя этого ключ
    запрашиваем список всех питомцев и проверяем что список не пустой.
    Доступное значение параметра filter - 'my_pets' либо '' """

    _, auth_key = pf.get_api_key(valid_email, valid_password)
    status, result = pf.get_list_of_pets(auth_key, filter)

    assert status == 200
    assert len(result['pets']) > 0

#4)негативный тест на запрос списка питомцу по невалидному auth_key (passed)
def test_get_all_pets_with_invalid_key(filter=''):
    status, result = pf.get_list_of_pets(auth_key = {'key': invalid_auth_key}, filter='')
    #Проверяем что запрос не выполняется, если api-key неверный
    assert status == 403

#5)негативный тест на запрос my_pets по невалидному auth_key (passed)
def test_get_all_pets_with_invalid_key(filter='my_pets'):
    status, result = pf.get_list_of_pets(auth_key = {'key': invalid_auth_key}, filter='my_pets')
    #Проверяем что запрос не выполняется, если api-key неверный
    assert status == 403

#6)Тест на удачное добавление пимтомца: create_pet_simple (passed)
def test_add_new_pet_simple_with_valid_data(name='Foxy_10', animal_type='fox', age='2'):
    """Проверяем что можно добавить питомца без фото с корректными данными"""

    # Запрашиваем ключ api и сохраняем в переменую auth_key
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    # Добавляем питомца
    status, result = pf.add_new_pet_simple(auth_key, name, animal_type, age)

    # Сверяем полученный ответ с ожидаемым результатом
    assert status == 200
    assert result['name'] == name

#7) Негативный тест:Добавляем питомца с некорректными данными def test_create_pet_simple_with_invalid_data:
# возраст - отрицательное значение (passed)
def test_add_new_pet_simple_with_invalid_data(name='Foxy_10', animal_type='fox', age="-2"):
    """Проверяем что можно добавить питомца без фото с некорректными данными"""

    # Запрашиваем ключ api и сохраняем в переменую auth_key
    _, auth_key = pf.get_api_key(valid_email, valid_password)

    # Добавляем питомца
    status, result = pf.add_new_pet_simple(auth_key, name, animal_type, age)

    # Сверяем полученный ответ с ожидаемым результатом
    assert status == 200


#8)Изменяем информацию о животном некорректными данными (возраст животного: отрицательное число) - passed
def test_successful_update_self_pet_invalid_age(name='Бобик', animal_type='Котэ', age=-5):
    """Проверяем возможность обновления информации о питомце"""

    # Получаем ключ auth_key и список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Если список не пустой, то пробуем обновить его имя, тип и возраст
    if len(my_pets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

        # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
        assert status == 200
        assert result['name'] == name
    else:
        # если спиок питомцев пустой, то выкидываем исключение с текстом об отсутствии своих питомцев
        raise Exception("There is no my pets")

#9)Изменяем информацию о животном некорректными данными (имя животного: специальные символы) - passed
def test_successful_update_self_pet_invalid_name(name='&^%^%&%&^%&', animal_type='Котэ', age=6):
    """Проверяем возможность обновления информации о питомце"""

    # Получаем ключ auth_key и список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Еслди список не пустой, то пробуем обновить его имя, тип и возраст
    if len(my_pets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

        # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
        assert status == 200
        assert result['name'] == name
    else:
        # если спиок питомцев пустой, то выкидываем исключение с текстом об отсутствии своих питомцев
        raise Exception("There is no my pets")

#10) Проверяем возможность удалить несуществующего питомца (по "invalid_id) (прошел, но выдал код 200 вместо 403)
def test_unsuccessful_delete_self_pet():
       # Получаем ключ auth_key и запрашиваем список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

      # Берём id первого питомца из списка и отправляем запрос на удаление
    pet_id = "invalid pet_id"
    status, _ = pf.delete_pet(auth_key, pet_id)

    assert status == 200

#11) Проверяем возможность удаления питомца с пустым id; ошибка 404 должна быть в результате - passed
def test_unsuccessful_delete_self_pet_empty_id(pet_id = ''):

    # Получаем ключ auth_key и запрашиваем список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    #  Проверяем, что в списке питомцев нет id удаляемого питомца
    assert pet_id not in my_pets.values()

    # Отправляем запрос на удаление с пустым id
    status, _ = pf.delete_pet(auth_key, pet_id)

    # Проверяем что статус ответа равен 404
    assert status == 404
    assert '404 Not Found' in _

#12) Проверяем возможность обновления информации о питомце, созданным другим пользователем
def test_successful_update_info_otherUser_pet(name='Я не ваш питомец',
                                          animal_type='любой тип',
                                          age=99):
       # Получаем ключ other_auth_key, auth_key и запрашиваем список чужих питомцев
    _, other_auth_key = pf.get_api_key(other_email, valid_password)
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, other_pets = pf.get_list_of_pets(other_auth_key, "my_pets")

    # Проверяем - если список питомцев другого пользователя пустой, то добавляем нового и повторно запрашиваем список
    if len(other_pets['pets']) == 0:
        pf.add_new_pet(other_auth_key, "Not my cat", "Cat", "0,5", "images/Kitten1.jpg")
        _, other_pets = pf.get_list_of_pets(other_auth_key, "my_pets")

    # Пробуем обновить имя, тип и возраст первого элемента
    status, result = pf.update_pet_info(auth_key, other_pets['pets'][0]['id'], name, animal_type, age)

    # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
    assert status == 200
    assert result['name'] == name


#13 запасной тест (passed)
#обновление информации о питомце: invalid_type отрицательное число
def test_successful_update_self_pet_invalid_type(name='Kitty', animal_type='-3', age=6):
    """Проверяем возможность обновления информации о питомце"""

    # Получаем ключ auth_key и список своих питомцев
    _, auth_key = pf.get_api_key(valid_email, valid_password)
    _, my_pets = pf.get_list_of_pets(auth_key, "my_pets")

    # Еслди список не пустой, то пробуем обновить его имя, тип и возраст
    if len(my_pets['pets']) > 0:
        status, result = pf.update_pet_info(auth_key, my_pets['pets'][0]['id'], name, animal_type, age)

        # Проверяем что статус ответа = 200 и имя питомца соответствует заданному
        assert status == 200
        assert result['name'] == name
    else:
        # если спиок питомцев пустой, то выкидываем исключение с текстом об отсутствии своих питомцев
        raise Exception("There is no my pets")
